'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("InvDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class InvDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDeliveryOrder As DeliveryOrderDataTable
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DeliveryOrder")) Is Nothing) Then
                MyBase.Tables.Add(New DeliveryOrderDataTable(ds.Tables("DeliveryOrder")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DeliveryOrder() As DeliveryOrderDataTable
        Get
            Return Me.tableDeliveryOrder
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As InvDataSet = CType(MyBase.Clone,InvDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DeliveryOrder")) Is Nothing) Then
                MyBase.Tables.Add(New DeliveryOrderDataTable(ds.Tables("DeliveryOrder")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDeliveryOrder = CType(MyBase.Tables("DeliveryOrder"),DeliveryOrderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDeliveryOrder) Is Nothing) Then
                Me.tableDeliveryOrder.InitVars
            End If
        End If
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "InvDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/InvDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDeliveryOrder = New DeliveryOrderDataTable
        MyBase.Tables.Add(Me.tableDeliveryOrder)
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDeliveryOrder() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As InvDataSet = New InvDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DeliveryOrderRowChangeEventHandler(ByVal sender As Object, ByVal e As DeliveryOrderRowChangeEvent)
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DeliveryOrderDataTable
        Inherits Global.System.Data.TypedTableBase(Of DeliveryOrderRow)
        
        Private columnNo As Global.System.Data.DataColumn
        
        Private columnDONo As Global.System.Data.DataColumn
        
        Private columnDODate As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnSkuCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnArtNo As Global.System.Data.DataColumn
        
        Private columnRefProductCode As Global.System.Data.DataColumn
        
        Private columnBatchNo As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnIsPosted As Global.System.Data.DataColumn
        
        Private columnBarcodeImage As Global.System.Data.DataColumn
        
        Private columnIsTransfer As Global.System.Data.DataColumn
        
        Private columnGSTNo As Global.System.Data.DataColumn
        
        Private columnUOM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DeliveryOrder"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DONoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDONo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DODateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDODate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SkuCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSkuCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArtNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArtNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefProductCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefProductCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPostedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPosted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcodeImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsTransferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsTransfer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSTNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeliveryOrderRow
            Get
                Return CType(Me.Rows(index),DeliveryOrderRow)
            End Get
        End Property
        
        Public Event DeliveryOrderRowChanging As DeliveryOrderRowChangeEventHandler
        
        Public Event DeliveryOrderRowChanged As DeliveryOrderRowChangeEventHandler
        
        Public Event DeliveryOrderRowDeleting As DeliveryOrderRowChangeEventHandler
        
        Public Event DeliveryOrderRowDeleted As DeliveryOrderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDeliveryOrderRow(ByVal row As DeliveryOrderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDeliveryOrderRow( _
                    ByVal No As String,  _
                    ByVal DONo As String,  _
                    ByVal DODate As Date,  _
                    ByVal Reference As String,  _
                    ByVal Remark As String,  _
                    ByVal SkuCode As String,  _
                    ByVal Description As String,  _
                    ByVal ArtNo As String,  _
                    ByVal RefProductCode As String,  _
                    ByVal BatchNo As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal EntryDate As Date,  _
                    ByVal IsPosted As String,  _
                    ByVal BarcodeImage() As Byte,  _
                    ByVal IsTransfer As String,  _
                    ByVal GSTNo As String,  _
                    ByVal UOM As String) As DeliveryOrderRow
            Dim rowDeliveryOrderRow As DeliveryOrderRow = CType(Me.NewRow,DeliveryOrderRow)
            Dim columnValuesArray() As Object = New Object() {No, DONo, DODate, Reference, Remark, SkuCode, Description, ArtNo, RefProductCode, BatchNo, QTY, EntryDate, IsPosted, BarcodeImage, IsTransfer, GSTNo, UOM}
            rowDeliveryOrderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDeliveryOrderRow)
            Return rowDeliveryOrderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DeliveryOrderDataTable = CType(MyBase.Clone,DeliveryOrderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DeliveryOrderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNo = MyBase.Columns("No")
            Me.columnDONo = MyBase.Columns("DONo")
            Me.columnDODate = MyBase.Columns("DODate")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnSkuCode = MyBase.Columns("SkuCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnArtNo = MyBase.Columns("ArtNo")
            Me.columnRefProductCode = MyBase.Columns("RefProductCode")
            Me.columnBatchNo = MyBase.Columns("BatchNo")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnIsPosted = MyBase.Columns("IsPosted")
            Me.columnBarcodeImage = MyBase.Columns("BarcodeImage")
            Me.columnIsTransfer = MyBase.Columns("IsTransfer")
            Me.columnGSTNo = MyBase.Columns("GSTNo")
            Me.columnUOM = MyBase.Columns("UOM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNo = New Global.System.Data.DataColumn("No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo)
            Me.columnDONo = New Global.System.Data.DataColumn("DONo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDONo)
            Me.columnDODate = New Global.System.Data.DataColumn("DODate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDODate)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnSkuCode = New Global.System.Data.DataColumn("SkuCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkuCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnArtNo = New Global.System.Data.DataColumn("ArtNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArtNo)
            Me.columnRefProductCode = New Global.System.Data.DataColumn("RefProductCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefProductCode)
            Me.columnBatchNo = New Global.System.Data.DataColumn("BatchNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchNo)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnIsPosted = New Global.System.Data.DataColumn("IsPosted", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPosted)
            Me.columnBarcodeImage = New Global.System.Data.DataColumn("BarcodeImage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcodeImage)
            Me.columnIsTransfer = New Global.System.Data.DataColumn("IsTransfer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsTransfer)
            Me.columnGSTNo = New Global.System.Data.DataColumn("GSTNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTNo)
            Me.columnUOM = New Global.System.Data.DataColumn("UOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOM)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDeliveryOrderRow() As DeliveryOrderRow
            Return CType(Me.NewRow,DeliveryOrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DeliveryOrderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DeliveryOrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeliveryOrderRowChangedEvent) Is Nothing) Then
                RaiseEvent DeliveryOrderRowChanged(Me, New DeliveryOrderRowChangeEvent(CType(e.Row,DeliveryOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeliveryOrderRowChangingEvent) Is Nothing) Then
                RaiseEvent DeliveryOrderRowChanging(Me, New DeliveryOrderRowChangeEvent(CType(e.Row,DeliveryOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeliveryOrderRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeliveryOrderRowDeleted(Me, New DeliveryOrderRowChangeEvent(CType(e.Row,DeliveryOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeliveryOrderRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeliveryOrderRowDeleting(Me, New DeliveryOrderRowChangeEvent(CType(e.Row,DeliveryOrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDeliveryOrderRow(ByVal row As DeliveryOrderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As InvDataSet = New InvDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DeliveryOrderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.TypedTableBase(Of DataTable1Row)
        
        Private columnRowNo As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnArtNo As Global.System.Data.DataColumn
        
        Private columnRefProductCode As Global.System.Data.DataColumn
        
        Private columnBatchCode As Global.System.Data.DataColumn
        
        Private columnDiscRate As Global.System.Data.DataColumn
        
        Private columnDiscAMT As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnUOMCode As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnTotalPrice As Global.System.Data.DataColumn
        
        Private columnFreightCharges As Global.System.Data.DataColumn
        
        Private columnGrandTotal As Global.System.Data.DataColumn
        
        Private columnDiscAmt1 As Global.System.Data.DataColumn
        
        Private columnDiscRate1 As Global.System.Data.DataColumn
        
        Private columnOtherCharges As Global.System.Data.DataColumn
        
        Private columnIsPosted As Global.System.Data.DataColumn
        
        Private columnInvoiceDate As Global.System.Data.DataColumn
        
        Private columnEntryDate As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnCustName As Global.System.Data.DataColumn
        
        Private columnAdd1 As Global.System.Data.DataColumn
        
        Private columnAdd2 As Global.System.Data.DataColumn
        
        Private columnPostCode As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnBarcodeImage As Global.System.Data.DataColumn
        
        Private columnBarcodeRefID As Global.System.Data.DataColumn
        
        Private columnSellingPrice As Global.System.Data.DataColumn
        
        Private columnIsTransfer As Global.System.Data.DataColumn
        
        Private columnUnitCost As Global.System.Data.DataColumn
        
        Private columnTotalCost As Global.System.Data.DataColumn
        
        Private columncustcode As Global.System.Data.DataColumn
        
        Private columnGSTRate As Global.System.Data.DataColumn
        
        Private columnGSTAmt As Global.System.Data.DataColumn
        
        Private columnGSTCharges As Global.System.Data.DataColumn
        
        Private columnGSTNo As Global.System.Data.DataColumn
        
        Private columnregno As Global.System.Data.DataColumn
        
        Private columnTotalZR As Global.System.Data.DataColumn
        
        Private columnTotalSR As Global.System.Data.DataColumn
        
        Private columnCustomCharges1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArtNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArtNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefProductCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefProductCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UOMCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUOMCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FreightChargesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFreightCharges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GrandTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrandTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscAmt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscAmt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiscRate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiscRate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherChargesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherCharges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPostedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPosted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcodeImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeRefIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcodeRefID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SellingPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSellingPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsTransferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsTransfer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSTRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSTAmtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTAmt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSTChargesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTCharges
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSTNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGSTNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalZRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalZR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalSRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalSR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomCharges1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomCharges1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row( _
                    ByVal RowNo As String,  _
                    ByVal Barcode As String,  _
                    ByVal Description As String,  _
                    ByVal ArtNo As String,  _
                    ByVal RefProductCode As String,  _
                    ByVal BatchCode As String,  _
                    ByVal DiscRate As Decimal,  _
                    ByVal DiscAMT As Decimal,  _
                    ByVal Quantity As Decimal,  _
                    ByVal UOMCode As String,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal TotalPrice As Decimal,  _
                    ByVal FreightCharges As Decimal,  _
                    ByVal GrandTotal As String,  _
                    ByVal DiscAmt1 As Decimal,  _
                    ByVal DiscRate1 As Decimal,  _
                    ByVal OtherCharges As Decimal,  _
                    ByVal IsPosted As String,  _
                    ByVal InvoiceDate As Date,  _
                    ByVal EntryDate As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal CustName As String,  _
                    ByVal Add1 As String,  _
                    ByVal Add2 As String,  _
                    ByVal PostCode As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Country As String,  _
                    ByVal Reference As String,  _
                    ByVal Remark As String,  _
                    ByVal BarcodeImage() As Byte,  _
                    ByVal BarcodeRefID() As Byte,  _
                    ByVal SellingPrice As Decimal,  _
                    ByVal IsTransfer As String,  _
                    ByVal UnitCost As Decimal,  _
                    ByVal TotalCost As Decimal,  _
                    ByVal custcode As String,  _
                    ByVal GSTRate As Decimal,  _
                    ByVal GSTAmt As Decimal,  _
                    ByVal GSTCharges As Decimal,  _
                    ByVal GSTNo As String,  _
                    ByVal regno As String,  _
                    ByVal TotalZR As Decimal,  _
                    ByVal TotalSR As Decimal,  _
                    ByVal CustomCharges1 As Decimal) As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {RowNo, Barcode, Description, ArtNo, RefProductCode, BatchCode, DiscRate, DiscAMT, Quantity, UOMCode, UnitPrice, TotalPrice, FreightCharges, GrandTotal, DiscAmt1, DiscRate1, OtherCharges, IsPosted, InvoiceDate, EntryDate, CreatedBy, CustName, Add1, Add2, PostCode, City, State, Country, Reference, Remark, BarcodeImage, BarcodeRefID, SellingPrice, IsTransfer, UnitCost, TotalCost, custcode, GSTRate, GSTAmt, GSTCharges, GSTNo, regno, TotalZR, TotalSR, CustomCharges1}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRowNo = MyBase.Columns("RowNo")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnArtNo = MyBase.Columns("ArtNo")
            Me.columnRefProductCode = MyBase.Columns("RefProductCode")
            Me.columnBatchCode = MyBase.Columns("BatchCode")
            Me.columnDiscRate = MyBase.Columns("DiscRate")
            Me.columnDiscAMT = MyBase.Columns("DiscAMT")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnUOMCode = MyBase.Columns("UOMCode")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnTotalPrice = MyBase.Columns("TotalPrice")
            Me.columnFreightCharges = MyBase.Columns("FreightCharges")
            Me.columnGrandTotal = MyBase.Columns("GrandTotal")
            Me.columnDiscAmt1 = MyBase.Columns("DiscAmt1")
            Me.columnDiscRate1 = MyBase.Columns("DiscRate1")
            Me.columnOtherCharges = MyBase.Columns("OtherCharges")
            Me.columnIsPosted = MyBase.Columns("IsPosted")
            Me.columnInvoiceDate = MyBase.Columns("InvoiceDate")
            Me.columnEntryDate = MyBase.Columns("EntryDate")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnCustName = MyBase.Columns("CustName")
            Me.columnAdd1 = MyBase.Columns("Add1")
            Me.columnAdd2 = MyBase.Columns("Add2")
            Me.columnPostCode = MyBase.Columns("PostCode")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnBarcodeImage = MyBase.Columns("barcodeimage")
            Me.columnBarcodeRefID = MyBase.Columns("BarcodeRefID")
            Me.columnSellingPrice = MyBase.Columns("SellingPrice")
            Me.columnIsTransfer = MyBase.Columns("IsTransfer")
            Me.columnUnitCost = MyBase.Columns("UnitCost")
            Me.columnTotalCost = MyBase.Columns("TotalCost")
            Me.columncustcode = MyBase.Columns("custcode")
            Me.columnGSTRate = MyBase.Columns("GSTRate")
            Me.columnGSTAmt = MyBase.Columns("GSTAmt")
            Me.columnGSTCharges = MyBase.Columns("GSTCharges")
            Me.columnGSTNo = MyBase.Columns("GSTNo")
            Me.columnregno = MyBase.Columns("regno")
            Me.columnTotalZR = MyBase.Columns("TotalZR")
            Me.columnTotalSR = MyBase.Columns("TotalSR")
            Me.columnCustomCharges1 = MyBase.Columns("CustomCharges1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRowNo = New Global.System.Data.DataColumn("RowNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowNo)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnArtNo = New Global.System.Data.DataColumn("ArtNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArtNo)
            Me.columnRefProductCode = New Global.System.Data.DataColumn("RefProductCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefProductCode)
            Me.columnBatchCode = New Global.System.Data.DataColumn("BatchCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchCode)
            Me.columnDiscRate = New Global.System.Data.DataColumn("DiscRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscRate)
            Me.columnDiscAMT = New Global.System.Data.DataColumn("DiscAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscAMT)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnUOMCode = New Global.System.Data.DataColumn("UOMCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUOMCode)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnTotalPrice = New Global.System.Data.DataColumn("TotalPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPrice)
            Me.columnFreightCharges = New Global.System.Data.DataColumn("FreightCharges", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFreightCharges)
            Me.columnGrandTotal = New Global.System.Data.DataColumn("GrandTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrandTotal)
            Me.columnDiscAmt1 = New Global.System.Data.DataColumn("DiscAmt1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscAmt1)
            Me.columnDiscRate1 = New Global.System.Data.DataColumn("DiscRate1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiscRate1)
            Me.columnOtherCharges = New Global.System.Data.DataColumn("OtherCharges", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherCharges)
            Me.columnIsPosted = New Global.System.Data.DataColumn("IsPosted", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPosted)
            Me.columnInvoiceDate = New Global.System.Data.DataColumn("InvoiceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceDate)
            Me.columnEntryDate = New Global.System.Data.DataColumn("EntryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryDate)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnCustName = New Global.System.Data.DataColumn("CustName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustName)
            Me.columnAdd1 = New Global.System.Data.DataColumn("Add1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd1)
            Me.columnAdd2 = New Global.System.Data.DataColumn("Add2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd2)
            Me.columnPostCode = New Global.System.Data.DataColumn("PostCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostCode)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnBarcodeImage = New Global.System.Data.DataColumn("barcodeimage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            Me.columnBarcodeImage.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BarcodeImage")
            Me.columnBarcodeImage.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BarcodeImageColumn")
            Me.columnBarcodeImage.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBarcodeImage")
            Me.columnBarcodeImage.ExtendedProperties.Add("Generator_UserColumnName", "barcodeimage")
            MyBase.Columns.Add(Me.columnBarcodeImage)
            Me.columnBarcodeRefID = New Global.System.Data.DataColumn("BarcodeRefID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcodeRefID)
            Me.columnSellingPrice = New Global.System.Data.DataColumn("SellingPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSellingPrice)
            Me.columnIsTransfer = New Global.System.Data.DataColumn("IsTransfer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsTransfer)
            Me.columnUnitCost = New Global.System.Data.DataColumn("UnitCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitCost)
            Me.columnTotalCost = New Global.System.Data.DataColumn("TotalCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCost)
            Me.columncustcode = New Global.System.Data.DataColumn("custcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustcode)
            Me.columnGSTRate = New Global.System.Data.DataColumn("GSTRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTRate)
            Me.columnGSTAmt = New Global.System.Data.DataColumn("GSTAmt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTAmt)
            Me.columnGSTCharges = New Global.System.Data.DataColumn("GSTCharges", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTCharges)
            Me.columnGSTNo = New Global.System.Data.DataColumn("GSTNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSTNo)
            Me.columnregno = New Global.System.Data.DataColumn("regno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregno)
            Me.columnTotalZR = New Global.System.Data.DataColumn("TotalZR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalZR)
            Me.columnTotalSR = New Global.System.Data.DataColumn("TotalSR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalSR)
            Me.columnCustomCharges1 = New Global.System.Data.DataColumn("CustomCharges1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomCharges1)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As InvDataSet = New InvDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DeliveryOrderRow
        Inherits Global.System.Data.DataRow
        
        Private tableDeliveryOrder As DeliveryOrderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeliveryOrder = CType(Me.Table,DeliveryOrderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property No() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'No' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DONo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.DONoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DONo' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.DONoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DODate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.DODateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DODate' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.DODateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SkuCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.SkuCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SkuCode' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.SkuCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArtNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.ArtNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArtNo' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.ArtNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefProductCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.RefProductCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefProductCode' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.RefProductCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.BatchNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BatchNo' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.BatchNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.EntryDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryDate' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPosted() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.IsPostedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPosted' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.IsPostedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarcodeImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.BarcodeImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarcodeImage' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.BarcodeImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsTransfer() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.IsTransferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsTransfer' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.IsTransferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSTNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.GSTNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTNo' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.GSTNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeliveryOrder.UOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOM' in table 'DeliveryOrder' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeliveryOrder.UOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoNull()
            Me(Me.tableDeliveryOrder.NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDONoNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.DONoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDONoNull()
            Me(Me.tableDeliveryOrder.DONoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDODateNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.DODateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDODateNull()
            Me(Me.tableDeliveryOrder.DODateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenceNull()
            Me(Me.tableDeliveryOrder.ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableDeliveryOrder.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSkuCodeNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.SkuCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSkuCodeNull()
            Me(Me.tableDeliveryOrder.SkuCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableDeliveryOrder.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArtNoNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.ArtNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArtNoNull()
            Me(Me.tableDeliveryOrder.ArtNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefProductCodeNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.RefProductCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefProductCodeNull()
            Me(Me.tableDeliveryOrder.RefProductCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchNoNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.BatchNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchNoNull()
            Me(Me.tableDeliveryOrder.BatchNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tableDeliveryOrder.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryDateNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.EntryDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryDateNull()
            Me(Me.tableDeliveryOrder.EntryDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPostedNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.IsPostedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPostedNull()
            Me(Me.tableDeliveryOrder.IsPostedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeImageNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.BarcodeImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeImageNull()
            Me(Me.tableDeliveryOrder.BarcodeImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsTransferNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.IsTransferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsTransferNull()
            Me(Me.tableDeliveryOrder.IsTransferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSTNoNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.GSTNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSTNoNull()
            Me(Me.tableDeliveryOrder.GSTNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableDeliveryOrder.UOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMNull()
            Me(Me.tableDeliveryOrder.UOMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.RowNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowNo' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.RowNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArtNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ArtNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ArtNo' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ArtNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RefProductCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.RefProductCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RefProductCode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.RefProductCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.BatchCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BatchCode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.BatchCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DiscRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscRate' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DiscRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DiscAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscAMT' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DiscAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UOMCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.UOMCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UOMCode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.UOMCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.UnitPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.TotalPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPrice' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.TotalPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FreightCharges() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.FreightChargesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FreightCharges' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.FreightChargesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GrandTotal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GrandTotalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GrandTotal' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GrandTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscAmt1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DiscAmt1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscAmt1' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DiscAmt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiscRate1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DiscRate1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiscRate1' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DiscRate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherCharges() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.OtherChargesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherCharges' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.OtherChargesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPosted() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.IsPostedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsPosted' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.IsPostedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.InvoiceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceDate' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.InvoiceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.EntryDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryDate' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.EntryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CreatedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CustNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustName' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CustNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.Add1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add1' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.Add1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.Add2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add2' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.Add2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.PostCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostCode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.PostCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarcodeImage() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.BarcodeImageColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'barcodeimage' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.BarcodeImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BarcodeRefID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.BarcodeRefIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BarcodeRefID' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.BarcodeRefIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SellingPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.SellingPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SellingPrice' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.SellingPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsTransfer() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.IsTransferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsTransfer' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.IsTransferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.UnitCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitCost' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.UnitCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.TotalCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalCost' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.TotalCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.custcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custcode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.custcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSTRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GSTRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTRate' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GSTRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSTAmt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GSTAmtColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTAmt' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GSTAmtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSTCharges() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GSTChargesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTCharges' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GSTChargesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSTNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GSTNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GSTNo' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GSTNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regno() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.regnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'regno' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.regnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalZR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.TotalZRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalZR' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.TotalZRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalSR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.TotalSRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalSR' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.TotalSRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomCharges1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CustomCharges1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomCharges1' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CustomCharges1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowNoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.RowNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowNoNull()
            Me(Me.tableDataTable1.RowNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tableDataTable1.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableDataTable1.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArtNoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ArtNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArtNoNull()
            Me(Me.tableDataTable1.ArtNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefProductCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.RefProductCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefProductCodeNull()
            Me(Me.tableDataTable1.RefProductCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.BatchCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchCodeNull()
            Me(Me.tableDataTable1.BatchCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscRateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DiscRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscRateNull()
            Me(Me.tableDataTable1.DiscRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscAMTNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DiscAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscAMTNull()
            Me(Me.tableDataTable1.DiscAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableDataTable1.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUOMCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.UOMCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUOMCodeNull()
            Me(Me.tableDataTable1.UOMCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tableDataTable1.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPriceNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.TotalPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPriceNull()
            Me(Me.tableDataTable1.TotalPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFreightChargesNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.FreightChargesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFreightChargesNull()
            Me(Me.tableDataTable1.FreightChargesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGrandTotalNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GrandTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGrandTotalNull()
            Me(Me.tableDataTable1.GrandTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscAmt1Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DiscAmt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscAmt1Null()
            Me(Me.tableDataTable1.DiscAmt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiscRate1Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DiscRate1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiscRate1Null()
            Me(Me.tableDataTable1.DiscRate1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherChargesNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.OtherChargesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherChargesNull()
            Me(Me.tableDataTable1.OtherChargesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsPostedNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.IsPostedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsPostedNull()
            Me(Me.tableDataTable1.IsPostedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.InvoiceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceDateNull()
            Me(Me.tableDataTable1.InvoiceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryDateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.EntryDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryDateNull()
            Me(Me.tableDataTable1.EntryDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CreatedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByNull()
            Me(Me.tableDataTable1.CreatedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustNameNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CustNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustNameNull()
            Me(Me.tableDataTable1.CustNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd1Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.Add1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd1Null()
            Me(Me.tableDataTable1.Add1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd2Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.Add2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd2Null()
            Me(Me.tableDataTable1.Add2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.PostCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostCodeNull()
            Me(Me.tableDataTable1.PostCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableDataTable1.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableDataTable1.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me.tableDataTable1.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenceNull()
            Me(Me.tableDataTable1.ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableDataTable1.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeImageNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.BarcodeImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeImageNull()
            Me(Me.tableDataTable1.BarcodeImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeRefIDNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.BarcodeRefIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeRefIDNull()
            Me(Me.tableDataTable1.BarcodeRefIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSellingPriceNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.SellingPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSellingPriceNull()
            Me(Me.tableDataTable1.SellingPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsTransferNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.IsTransferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsTransferNull()
            Me(Me.tableDataTable1.IsTransferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitCostNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.UnitCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitCostNull()
            Me(Me.tableDataTable1.UnitCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCostNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.TotalCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCostNull()
            Me(Me.tableDataTable1.TotalCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustcodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.custcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustcodeNull()
            Me(Me.tableDataTable1.custcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSTRateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GSTRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSTRateNull()
            Me(Me.tableDataTable1.GSTRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSTAmtNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GSTAmtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSTAmtNull()
            Me(Me.tableDataTable1.GSTAmtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSTChargesNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GSTChargesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSTChargesNull()
            Me(Me.tableDataTable1.GSTChargesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGSTNoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GSTNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGSTNoNull()
            Me(Me.tableDataTable1.GSTNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregnoNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.regnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregnoNull()
            Me(Me.tableDataTable1.regnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalZRNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.TotalZRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalZRNull()
            Me(Me.tableDataTable1.TotalZRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalSRNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.TotalSRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalSRNull()
            Me(Me.tableDataTable1.TotalSRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomCharges1Null() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CustomCharges1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomCharges1Null()
            Me(Me.tableDataTable1.CustomCharges1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DeliveryOrderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DeliveryOrderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DeliveryOrderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DeliveryOrderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
